/*** Send request to firebase and get required data value.* @param 'ref' the firebase url (request)          'callbackValue' callback value needed in the calling method          'callback' the callback function*/function getFirebaseEntryValue(ref, callbackObj, callback) {  // Send request to firebase  new Firebase(ref).once('value', function(dataSnapshot) {  //callback    console.log(dataSnapshot.val());    callback(dataSnapshot.val(), callbackObj);  // callback with data retrieved  });}/*** Syllabifier class handles text syllabifications.*/Syllabifier = Class.$extend({  /**  * Initilize class variables (classy.js is used for class creation)  */  __init__: function() {    // configure Hyphenator    Hyphenator.config({      'minwordlength': 3,      'hyphenchar': '-'    });    this.firebaseRef = "https://readfm.firebaseio.com/syllableLookup/";  // firebase url    this.fbWordsSybs = {};    this.sourceText = null;    this.hyphenatedText = null;  },  /**  * Divide words into syllables separated by '-'  * Retrieve sybs of text words from firebase then hyphenate text.  * @param 'text' text to be syllabified           'callback' callback function to return to toggle.data  */  syllabifyText: function(text, callback) {    var i, word = "";    var syllabifier = this;    var isNewText = this.sourceText == null || this.sourceText != text;    if(isNewText) {      this.fbWordsSybs = {};      this.sourceText = text;      text = text.replace(/\-/g, '@');      var words = getStrWords(text);      for(i=0; i<words.length; i++) {        word = words[i].toLowerCase();        // Send request to firebase        getFirebaseEntryValue(this.firebaseRef+word, i, function(data, wordIx) {  //callback          syllabifier.fbWordsSybs[wordIx] = data;          if(Object.size(syllabifier.fbWordsSybs) == words.length) syllabifier.hyphenateText(text, callback);        });      }    } else {      callback(this.hyphenatedText);    }  },  /**  * Hyphenate text using Hyphenator.js and firebase lookup table.  * Hyphenate text using Hyphenator.js api, loop on hyphenated text words.  * If word has sybs on fb, then replace the hyphenated word got from hyphenator by the one got from fb.  * If word has no saved sybs on fb, then use the already hyphenated word and save it into fb.  * @param 'text' text to be hyphenated           'callback' callback function to return to toggle.data  * @return text hyphenated with '- '  */  hyphenateText: function(text, callback) {    var i, j, word, hword, fbhword, syllables;    text = Hyphenator.hyphenate(text, 'en');    var hwords = getStrWords(text);    for(i=0; i<hwords.length; i++) {      hword = hwords[i];      word = hword.replace(/\-/g, '');      if(this.fbWordsSybs[i]) { // there is a saved sybs of this word        syllables = this.fbWordsSybs[i].split('-');        fbhword = "";        j = 0;        $.each(syllables, function() {          fbhword = fbhword + word.substr(j, this.length) + '-';          j += this.length;        });        fbhword = fbhword.substring(0, fbhword.length-1); // Remove the last -        re = new RegExp(hword);        text = text.replace(re, fbhword);      } else { // no saved sybs of this word, keep the existing hyphenated word and save it to fb        new Firebase(this.firebaseRef+word.toLowerCase()).set(hword.toLowerCase()); // save hyphenated word      }    }    text = text.replace(/\@/g, '--'); // Add hyphen here    this.hyphenatedText = text; // cache of hyphenated text    callback(text);  },  /**  * Remove hyphens from text.  * @param 'hText' the hyphenated text  * @return orginal text  */  unsyllabifyText: function(hText) {    return hText.replace(/\--/g, '@').replace(/\-/g, '').replace(/\@/g, '-');  }});/*** Timing class handles timing features.*/Timing = Class.$extend({  /**  * Initilize class variables (classy.js is used for class creation)  */  __init__: function() {    this.timingLines = [];    this.sourceText = null;    this.firebaseRef = "https://readfm.firebaseio.com/foo/";  },  /**  * Get timing lines for text lines.  * Load timing lines from fb, create time slots for lines that does not have a saved entry.  * @param 'text' the input text           'hText' hyphenated text           'callback' callback function to return to toggle.data  * @retutn timing lines  */  getSegTiming: function(text, hText, callback) {    var z = 1, i, j, timing = "", segs = [], timingLines = [], words = [];    var timing = this;    var isNewText = this.sourceText == null || this.sourceText != text; // check if it's a new text    if(!isNewText) {  // old text, return cached timing      callback(this.timingLines);      return;    }    // Create timing slots for this new text    this.sourceText = text;    this.timingLines = [];    var lines = text.split('\n');    for(i=0; i<lines.length; i++) {      line = getStrWords(lines[i]).join('-');      getFirebaseEntryValue(this.firebaseRef+line+"/timing", i, function(data, lineIx) {  //callback        timing.timingLines[lineIx] = data;        if(timing.timingLines.length == lines.length) timing.fillTimings(hText, callback);      });    }  },  incompleteTimings: function() {    for(var i=0; i<this.timingLines.length; i++) {      if(!this.timingLines[i]) return true;    }    return false;  },  /**  * Create time slots for segments.  * @param 'hText' the hyphenated input text           'callback' callback function to return to toggle.data  * @retutn timing lines  */  fillTimings: function(hText, callback) {    var z = 1, i, j, timing = "", segs = [], words = [], timingLines = [];    // If all timing lines loaded from firebase, then return loaded timings    if(!this.incompleteTimings()) {      callback(this.timingLines);      return;    }    // Create timing slots for this new text    var lines = hText.split('\n'); // hyphenated lines    for(i=0; i<lines.length; i++) {      // Create timing slots for this line      timing = "";      words = getStrWords(lines[i]);      for(j=0; j<words.length; j++) {        segs = words[j].split('-');        $.each(segs, function() {          if(this != "") {            timing += z + ".00" + " ";            z += 1;          }        });      }      timingLines[i] = $.trim(timing);    }    this.timingLines = timingLines;    callback(this.timingLines);  },  /**  * Save timing lines into firebase.  * @param 'text' the input text  */  saveTimings: function(text) {    var i, line = "";    var lines = text.split('\n');    for(i=0; i<lines.length; i++) {      line = getStrWords(lines[i]).join('-');      new Firebase(this.firebaseRef+line+"/timing").set(this.timingLines[i]); // save timing line    }  },  /**  * Get timing lines.  * @return timing lines of current text  */  getTimingLines: function() {    return this.timingLines;  },  /**  * Set timing lines.  * @param 'lines' new timing lines  */  setTimingLines: function(lines) {    this.timingLines = lines;  }});